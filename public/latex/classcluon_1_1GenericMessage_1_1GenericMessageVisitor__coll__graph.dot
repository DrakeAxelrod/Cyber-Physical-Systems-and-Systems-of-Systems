digraph "cluon::GenericMessage::GenericMessageVisitor"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{cluon::GenericMessage\l::GenericMessageVisitor\n||+ GenericMessageVisitor()\l+ preVisit()\l+ postVisit()\l+ visit()\l+ visit()\l+ visit()\l+ visit()\l+ visit()\l+ visit()\l+ visit()\l+ visit()\l+ visit()\l+ visit()\l+ visit()\l+ visit()\l+ visit()\l+ visit()\l+ metaMessage()\l+ intermediateDataRepresentation()\l- GenericMessageVisitor()\l- GenericMessageVisitor()\l- operator=()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_metaMessage" ,arrowhead="odiamond"];
  Node2 [label="{cluon::MetaMessage\n||+ MetaMessage()\l+ MetaMessage()\l+ MetaMessage()\l+ operator=()\l+ operator=()\l+ add()\l+ listOfMetaFields()\l+ accept()\l+ packageName()\l+ packageName()\l+ messageName()\l+ messageName()\l+ messageIdentifier()\l+ messageIdentifier()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcluon_1_1MetaMessage.html",tooltip=" "];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -m_messageName\n-m_packageName" ,arrowhead="odiamond"];
  Node3 [label="{std::string\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{std::basic_string\<\l Char \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node5 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -m_messageIdentifier" ,arrowhead="odiamond"];
  Node5 [label="{int32_t\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node6 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -m_listOfMetaFields" ,arrowhead="odiamond"];
  Node6 [label="{std::vector\< cluon\l::MetaMessage::MetaField \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond"];
  Node7 [label="{cluon::MetaMessage\l::MetaField\n||+ MetaField()\l+ MetaField()\l+ MetaField()\l+ operator=()\l+ fieldDataType()\l+ fieldDataType()\l+ fieldDataTypeName()\l+ fieldDataTypeName()\l+ fieldName()\l+ fieldName()\l+ fieldIdentifier()\l+ fieldIdentifier()\l+ defaultInitializationValue()\l+ defaultInitializationValue()\l- operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcluon_1_1MetaMessage_1_1MetaField.html",tooltip=" "];
  Node8 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -m_fieldDataType" ,arrowhead="odiamond"];
  Node8 [label="{MetaFieldDataTypes\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node3 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -m_defaultInitialization\lValue\n-m_fieldDataTypeName\n-m_fieldName" ,arrowhead="odiamond"];
  Node9 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -m_fieldIdentifier" ,arrowhead="odiamond"];
  Node9 [label="{uint32_t\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node10 -> Node6 [dir="back",color="orange",fontsize="10",style="solid",label=" \< cluon::MetaMessage\l::MetaField \>" ];
  Node10 [label="{std::vector\< T \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node11 -> Node10 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond"];
  Node11 [label="{T\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node12 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -m_intermediateDataRepresentation" ,arrowhead="odiamond"];
  Node12 [label="{std::unordered_map\l\< uint32_t, linb::any,\l cluon::UseUInt32ValueAsHashKey \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node9 -> Node12 [color="grey25",fontsize="10",style="solid",label=" +keys" ,arrowhead="odiamond"];
  Node13 -> Node12 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond"];
  Node13 [label="{linb::any\n||+ any()\l+ any()\l+ any()\l+ ~any()\l+ any()\l+ operator=()\l+ operator=()\l+ operator=()\l+ clear()\l+ empty()\l+ type()\l+ swap()\l# cast()\l# cast()\l- do_construct()\l- do_construct()\l- construct()\l- vtable_for_type()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classlinb_1_1any.html",tooltip=" "];
  Node14 -> Node13 [color="grey25",fontsize="10",style="solid",label=" -storage" ,arrowhead="odiamond"];
  Node14 [label="{linb::any::storage\l_union\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$unionlinb_1_1any_1_1storage__union.html",tooltip=" "];
  Node15 -> Node14 [color="grey25",fontsize="10",style="solid",label=" +dynamic" ,arrowhead="odiamond"];
  Node15 [label="{void *\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node16 -> Node14 [color="grey25",fontsize="10",style="solid",label=" +stack" ,arrowhead="odiamond"];
  Node16 [label="{type\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node17 -> Node13 [color="grey25",fontsize="10",style="solid",label=" -vtable" ,arrowhead="odiamond"];
  Node17 [label="{linb::any::vtable_type\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structlinb_1_1any_1_1vtable__type.html",tooltip="Base VTable specification."];
  Node18 -> Node17 [color="grey25",fontsize="10",style="solid",label=" +type" ,arrowhead="odiamond"];
  Node18 [label="{type_info &(*)() noexcept\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node19 -> Node17 [color="grey25",fontsize="10",style="solid",label=" +destroy" ,arrowhead="odiamond"];
  Node19 [label="{void(*)(storage_union\l &) noexcept\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node20 -> Node17 [color="grey25",fontsize="10",style="solid",label=" +copy" ,arrowhead="odiamond"];
  Node20 [label="{void(*)(const storage\l_union &src, storage\l_union &dest)\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node21 -> Node17 [color="grey25",fontsize="10",style="solid",label=" +move" ,arrowhead="odiamond"];
  Node21 [label="{void(*)(storage_union\l &src, storage_union\l &dest) noexcept\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node22 -> Node17 [color="grey25",fontsize="10",style="solid",label=" +swap" ,arrowhead="odiamond"];
  Node22 [label="{void(*)(storage_union\l &lhs, storage_union\l &rhs) noexcept\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node23 -> Node12 [dir="back",color="orange",fontsize="10",style="solid",label=" \< uint32_t, linb::any,\l cluon::UseUInt32ValueAsHash\lKey \>" ];
  Node23 [label="{std::unordered_map\l\< K, T \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node24 -> Node23 [color="grey25",fontsize="10",style="solid",label=" +keys" ,arrowhead="odiamond"];
  Node24 [label="{K\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node11 -> Node23 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond"];
}
