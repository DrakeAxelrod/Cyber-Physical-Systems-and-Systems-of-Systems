digraph "cluon::NotifyingPipeline&lt; T &gt;"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{cluon::NotifyingPipeline\< T \>\n|- m_delegate\l- m_pipelineThreadRunning\l- m_pipelineThread\l- m_pipelineMutex\l- m_pipelineCondition\l- m_pipeline\l|+ NotifyingPipeline()\l+ ~NotifyingPipeline()\l+ add()\l+ notifyAll()\l+ isRunning()\l- NotifyingPipeline()\l- NotifyingPipeline()\l- operator=()\l- operator=()\l- processPipeline()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [dir="back",color="orange",fontsize="10",style="solid",label=" \< cluon::TCPConnection\l::PipelineEntry \>" ];
  Node2 [label="{cluon::NotifyingPipeline\l\< cluon::TCPConnection\l::PipelineEntry \>\n|- m_delegate\l- m_pipelineThreadRunning\l- m_pipelineThread\l- m_pipelineMutex\l- m_pipelineCondition\l- m_pipeline\l|+ NotifyingPipeline()\l+ ~NotifyingPipeline()\l+ add()\l+ notifyAll()\l+ isRunning()\l- NotifyingPipeline()\l- NotifyingPipeline()\l- operator=()\l- operator=()\l- processPipeline()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcluon_1_1NotifyingPipeline.html",tooltip=" "];
  Node1 -> Node3 [dir="back",color="orange",fontsize="10",style="solid",label=" \< cluon::UDPReceiver\l::PipelineEntry \>" ];
  Node3 [label="{cluon::NotifyingPipeline\l\< cluon::UDPReceiver::Pipeline\lEntry \>\n|- m_delegate\l- m_pipelineThreadRunning\l- m_pipelineThread\l- m_pipelineMutex\l- m_pipelineCondition\l- m_pipeline\l|+ NotifyingPipeline()\l+ ~NotifyingPipeline()\l+ add()\l+ notifyAll()\l+ isRunning()\l- NotifyingPipeline()\l- NotifyingPipeline()\l- operator=()\l- operator=()\l- processPipeline()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcluon_1_1NotifyingPipeline.html",tooltip=" "];
}
