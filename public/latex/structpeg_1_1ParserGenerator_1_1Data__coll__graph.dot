digraph "peg::ParserGenerator::Data"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{peg::ParserGenerator\l::Data\n||+ Data()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +grammar" ,arrowhead="odiamond"];
  Node2 [label="{std::shared_ptr\< Grammar \>\n||+ operator-\>()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +ptr" ,arrowhead="odiamond"];
  Node3 [label="{std::unordered_map\l\< K, T \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +keys" ,arrowhead="odiamond"];
  Node4 [label="{K\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node5 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond"];
  Node5 [label="{T\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node6 -> Node2 [dir="back",color="orange",fontsize="10",style="solid",label=" \< Grammar \>" ];
  Node6 [label="{std::shared_ptr\< T \>\n||+ operator-\>()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node5 -> Node6 [color="grey25",fontsize="10",style="solid",label=" +ptr" ,arrowhead="odiamond"];
  Node7 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +start" ,arrowhead="odiamond"];
  Node7 [label="{std::string\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node8 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node8 [label="{std::basic_string\<\l Char \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node9 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +duplicates" ,arrowhead="odiamond"];
  Node9 [label="{std::vector\< std::pair\l\< std::string, const char * \> \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node10 -> Node9 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond"];
  Node10 [label="{pair\< std::string,\l const char * \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node11 -> Node9 [dir="back",color="orange",fontsize="10",style="solid",label=" \< std::pair\< std::string,\l const char * \> \>" ];
  Node11 [label="{std::vector\< T \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node5 -> Node11 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond"];
}
