digraph "peg::Context"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{peg::Context\n||+ Context()\l+ packrat()\l+ push()\l+ pop()\l+ push_args()\l+ pop_args()\l+ top_args()\l+ push_capture_scope()\l+ pop_capture_scope()\l+ shift_capture_values()\l+ set_error_pos()\l+ trace()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +error_pos\n+message_pos\n+path\n+s" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{char\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +def_count\n+l\n+nest_level\n+value_stack\l_size" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{size_t\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +message" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{std::string\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{std::basic_string\<\l Char \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node6 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +value_stack" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{std::vector\< std::shared\l_ptr\< peg::SemanticValues \> \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{std::shared_ptr\< peg\l::SemanticValues \>\n||+ operator-\>()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node8 -> Node7 [color="grey25",fontsize="10",style="solid",label=" +ptr" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{peg::SemanticValues\n||+ c_str()\l+ length()\l+ str()\l+ name()\l+ line_info()\l+ choice_count()\l+ choice()\l+ token()\l+ transform()\l+ SemanticValues()\l- transform()\l- transform()\l- reset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structpeg_1_1SemanticValues.html",tooltip=" "];
  Node9 -> Node8 [dir="back",color="darkgreen",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{std::vector\< T \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node10 -> Node9 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{T\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node2 -> Node8 [color="grey25",fontsize="10",style="solid",label=" +path\n+ss\n-s_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 -> Node8 [color="grey25",fontsize="10",style="solid",label=" +tags" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{std::vector\< unsigned\l int \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node12 -> Node11 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{int\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node13 -> Node11 [dir="back",color="orange",fontsize="10",style="solid",label=" \< unsigned int \>" ,fontname="Helvetica"];
  Node13 [label="{std::vector\< T \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node10 -> Node13 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 -> Node8 [color="grey25",fontsize="10",style="solid",label=" +tokens" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 [label="{std::vector\< std::pair\l\< const char *, size_t \> \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node15 -> Node14 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 [label="{pair\< const char *,\l size_t \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node13 -> Node14 [dir="back",color="orange",fontsize="10",style="solid",label=" \< std::pair\< const\l char *, size_t \> \>" ,fontname="Helvetica"];
  Node3 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -choice_\n-choice_count_\n-n_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -name_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 -> Node7 [dir="back",color="orange",fontsize="10",style="solid",label=" \< peg::SemanticValues \>" ,fontname="Helvetica"];
  Node16 [label="{std::shared_ptr\< T \>\n||+ operator-\>()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node10 -> Node16 [color="grey25",fontsize="10",style="solid",label=" +ptr" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 -> Node6 [dir="back",color="orange",fontsize="10",style="solid",label=" \< std::shared_ptr\<\l peg::SemanticValues \> \>" ,fontname="Helvetica"];
  Node17 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +args_stack" ,arrowhead="odiamond",fontname="Helvetica"];
  Node17 [label="{std::vector\< std::vector\l\< std::shared_ptr\< peg\l::Ope \> \> \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node18 -> Node17 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node18 [label="{vector\< std::shared\l_ptr\< peg::Ope \> \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node13 -> Node17 [dir="back",color="orange",fontsize="10",style="solid",label=" \< std::vector\< std\l::shared_ptr\< peg::Ope \> \> \>" ,fontname="Helvetica"];
  Node19 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +enablePackratParsing\n+in_token\n+in_whitespace" ,arrowhead="odiamond",fontname="Helvetica"];
  Node19 [label="{bool\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node20 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +whitespaceOpe\n+wordOpe" ,arrowhead="odiamond",fontname="Helvetica"];
  Node20 [label="{std::shared_ptr\< peg\l::Ope \>\n||+ operator-\>()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node21 -> Node20 [color="grey25",fontsize="10",style="solid",label=" +ptr" ,arrowhead="odiamond",fontname="Helvetica"];
  Node21 [label="{peg::Ope\n||+ ~Ope()\l+ parse()\l+ accept()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classpeg_1_1Ope.html",tooltip=" "];
  Node16 -> Node20 [dir="back",color="orange",fontsize="10",style="solid",label=" \< peg::Ope \>" ,fontname="Helvetica"];
  Node22 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +capture_scope_stack" ,arrowhead="odiamond",fontname="Helvetica"];
  Node22 [label="{std::vector\< std::unordered\l_map\< std::string, std::\lstring \> \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node23 -> Node22 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node23 [label="{std::unordered_map\l\< std::string, std::\lstring \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node4 -> Node23 [color="grey25",fontsize="10",style="solid",label=" +elements\n+keys" ,arrowhead="odiamond",fontname="Helvetica"];
  Node24 -> Node23 [dir="back",color="orange",fontsize="10",style="solid",label=" \< std::string, std\l::string \>" ,fontname="Helvetica"];
  Node24 [label="{std::unordered_map\l\< K, T \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node25 -> Node24 [color="grey25",fontsize="10",style="solid",label=" +keys" ,arrowhead="odiamond",fontname="Helvetica"];
  Node25 [label="{K\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node10 -> Node24 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 -> Node22 [dir="back",color="orange",fontsize="10",style="solid",label=" \< std::unordered_map\l\< std::string, std::string \> \>" ,fontname="Helvetica"];
  Node26 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +cache_registered\n+cache_success" ,arrowhead="odiamond",fontname="Helvetica"];
  Node26 [label="{std::vector\< bool \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node19 -> Node26 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 -> Node26 [dir="back",color="orange",fontsize="10",style="solid",label=" \< bool \>" ,fontname="Helvetica"];
  Node27 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +cache_values" ,arrowhead="odiamond",fontname="Helvetica"];
  Node27 [label="{std::map\< std::pair\l\< size_t, size_t \>,\l std::tuple\< size_t,\l peg::any \> \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node28 -> Node27 [color="grey25",fontsize="10",style="solid",label=" +keys" ,arrowhead="odiamond",fontname="Helvetica"];
  Node28 [label="{pair\< size_t, size_t \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node29 -> Node27 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node29 [label="{tuple\< size_t, peg\l::any \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node30 -> Node27 [dir="back",color="orange",fontsize="10",style="solid",label=" \< std::pair\< size_t,\l size_t \>, std::tuple\l\< size_t, peg::any \> \>" ,fontname="Helvetica"];
  Node30 [label="{std::map\< K, T \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node25 -> Node30 [color="grey25",fontsize="10",style="solid",label=" +keys" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 -> Node30 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node31 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +tracer" ,arrowhead="odiamond",fontname="Helvetica"];
  Node31 [label="{function\< void(const\l char *, const char *,\l size_t, const peg::Semantic\lValues &, const peg::Context\l &, const peg::any &)\>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
}
