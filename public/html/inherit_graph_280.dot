digraph "Graphical Class Hierarchy"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node0 [label="std::integral_constant\l\< bool, !(std::is_nothrow\l_move_constructible\< T \>\l::value &&sizeof(T)\<=sizeof\l(storage_union::stack) &&std\l::alignment_of\< T \>::value\<=std\l::alignment_of\< storage_union::\lstack_storage_t \>::value)\>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classstd_1_1integral__constant_3_01bool_00_01_9_07std_1_1is__nothrow__move__constructible_3_01T_5a853aa38b6ba2f8b9c66976970bc3b5.html",tooltip=" "];
  Node0 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 [label="linb::any::requires\l_allocation\< T \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structlinb_1_1any_1_1requires__allocation.html",tooltip="Whether the type T must be dynamically allocated or can be stored on the stack."];
}
