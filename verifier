#!/usr/bin/env python3
import socket
import os
import shutil
import subprocess
import threading
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from time import sleep
from copy import deepcopy

GIT_DIR = "/opt/sources"
ROOT_DIR = f"{GIT_DIR}/verification-results"

def read_csv(file_name):
    df = pd.read_csv(file_name)
    return df

# rename file to avoid overwriting
def rename_file(path, f):
  if os.path.isfile(path + f):
    os.rename(path + f, path + "prev-" + f)

def clean_prev():
  for f in os.listdir(f"{ROOT_DIR}/csvs"):
    if f.startswith("prev-"):
      os.remove(f"{ROOT_DIR}/csvs/{f}")

def rename_to_prev():
  dir = os.listdir(f"{ROOT_DIR}/csvs")
  if len(dir) > 0:
    for file in os.listdir(f"{ROOT_DIR}/csvs"):
      if not file.startswith("prev-"):
        rename_file(f"{ROOT_DIR}/csvs/", file)

def run_rec_file(filepath: str, i):
  cmd = f"{GIT_DIR}/scripts/verifier-runner.sh {GIT_DIR}/recordings/{filepath} {filepath.replace('.rec', '')} {i+1}"
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
  (output, err) = p.communicate()
  p_status = p.wait()


def run_all_rec_files_as_threads():
  threads = []
  for i, f in enumerate(os.listdir(f"{GIT_DIR}/recordings")):
    if f.endswith(".rec"):
      t = threading.Thread(target=run_rec_file, args=(f,i,))
      threads.append(t)
      sleep(1)
      t.start()
  for t in threads:
    t.join()
  while threading.active_count() > 1:
    pass


def create_dirs_if_needed():
  if not os.path.exists(f"{ROOT_DIR}"):
    os.mkdir(f"{ROOT_DIR}")
  if not os.path.exists(f"{ROOT_DIR}/graphs"):
    os.mkdir(f"{ROOT_DIR}/graphs")
  if not os.path.exists(f"{ROOT_DIR}/csvs"):
    os.mkdir(f"{ROOT_DIR}/csvs")
  if not os.path.exists(f"{ROOT_DIR}/stats"):
    os.mkdir(f"{ROOT_DIR}/stats")

def get_steering_data(path):
  computed = list()
  actual = list()
  timestamps = list()
  with open(path, 'r') as f:
    for line in f:
      line = line.split(';')
      if line[1] != None:
        timestamps.append(int(line[1]))
      if line[2] != None:
        computed.append(float(line[2]))
      if line[3] != None:
        actual.append(float(line[3]))
    f.close()
  df = pd.DataFrame(data={"timestamp": timestamps, "computed": computed, "actual": actual})
  return df


def create_graph(f, df: pd.DataFrame):
  df["timestamp"] = df["timestamp"].astype(str)
  plt.figure(figsize=(16,10))
  plt.plot(df["timestamp"], df["computed"], 'b', label='computed steering')
  plt.plot(df["timestamp"], df["actual"], 'r', label='actual steering')
  if len(df["prev-computed"]) > 0:
    plt.plot(df["timestamp"], df["prev-computed"], 'g', label='previous computed steering')
  plt.legend()
  plt.title(f"{f}")
  plt.xticks(rotation=90)
  plt.xticks(df["timestamp"][::10])
  plt.xticks(fontsize=8)
  plt.xlabel("sampleTimeStamp (microseconds)")
  plt.ylabel("steeringAngles (radians)")
  plt.tight_layout()
  plt.savefig(f"{ROOT_DIR}/graphs/{f.replace('.csv', '')}.png")
  plt.close()

def display_stats(f, df: pd.DataFrame):
  computed_num_max = 0
  computed_num_0 = 0
  actual_num_max = 0
  actual_num_0 = 0
  correct_predictions = 0
  std_steering = np.std(df["actual"])
  # do the same shit but with a dataframe
  for i, row in df.iterrows():
    if row["computed"] == 0.0:
      computed_num_0 += 1
    if row["actual"] == 0.0:
      actual_num_0 += 1
    if abs(row["computed"] - row["actual"]) < 0.05:
      correct_predictions += 1
    if abs(row["computed"]) == 0.290888:
      computed_num_max += 1
    if abs(row["actual"]) == 0.290888:
      actual_num_max += 1
  # calculate the percentage of correct predictions
  perc = correct_predictions / len(df)
  s = f"""
File: {f}
============================== Results ==============================
the steering angle standard deviation: {str(std_steering)}
The number of actual 0s: {str(actual_num_0)}
The number of computed 0s: {str(computed_num_0)}
The number of actual maxs: {str(actual_num_max)}
The number of computed maxs: {str(computed_num_max)}
the number correct predictions: {str(correct_predictions)}
The percentage of correct predictions is: {str(round(perc *100))}%
The total # of data points: {str(len(df))}
=====================================================================
"""
  print(s)
  # write the results to a file
  # make stats dir if it doesn't exist
  if not os.path.exists(f"{ROOT_DIR}/stats"):
    os.makedirs(f"{ROOT_DIR}/stats")
  name = f.replace(f"{ROOT_DIR}/csvs/CID-140-recording-2020-03-18_", "").replace("-selection.csv", "")
  path = f"{ROOT_DIR}/stats/{name}.txt"
  with open(f"{ROOT_DIR}/stats/{name}.txt", "w") as f:
    f.write(s)

def looper()
  for f in os.listdir(f"{ROOT_DIR}/csvs"):
    if f.startswith("prev-"):
      current = get_steering_data(f"{ROOT_DIR}/csvs/{f}")
      previous = get_steering_data(f"{ROOT_DIR}/csvs/{f.replace('prev-', '')}")
      previous.rename(columns={"computed": "prev-computed", "actual": "prev-actual"}, inplace=True)
      df = pd.merge(previous, current, on='timestamp', how='outer')
      df.drop(columns=['prev-actual'], inplace=True)
      create_graph(f.replace('prev-', ''), df)
      display_stats(f.replace('prev-', ''), df)

# entrypoint
if __name__ == '__main__':
  create_dirs_if_needed()
  rename_to_prev()
  run_all_rec_files_as_threads()
  looper()
  clean_prev()
